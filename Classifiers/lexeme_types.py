"""
    This file is used to define the different lexeme types that are used in LoLCode.
"""

def classify_passed_lexeme(lexeme):
    # Dictionary that contains the different lexeme types and their corresponding lexemes
    lexeme_types_dict = {
        "HAI": "program_start_delimiter",
        "KTHXBYE": "program_end_delimiter",
        "WAZZUP": "variable_declaration_start_delimiter",
        "BUHBYE": "variable_declaration_end_delimiter",
        "BTW": "single-line_comment_delimiter",
        "OBTW": "opening_multi-line_comment_delimiter",
        "TLDR": "closing_multi-line_comment_delimiter",
        "I HAS A": "variable_declaration_keyword",
        "ITZ": "variable_initialization_keyword",
        "R": "variable_assignment_keyword",
        "SUM OF": "arithmetic_operator",
        "DIFF OF": "arithmetic_operator",
        "PRODUKT OF": "arithmetic_operator",
        "QUOSHUNT OF": "arithmetic_operator",
        "MOD OF": "arithmetic_operator",
        "BIGGR OF": "arithmetic_operator",
        "SMALLR OF": "arithmetic_operator",
        "BOTH OF": "logical_operator",
        "EITHER OF": "logical_operator",
        "WON OF": "logical_operator",
        "NOT": "logical_operator",
        "ANY OF": "logical_operator",
        "ALL OF": "logical_operator",
        "BOTH SAEM": "comparison_operator",
        "DIFFRINT": "comparison_operator",
        "SMOOSH": "concatenation_operator",
        "MAEK": "type_casting_delimiter",
        "A": "type_casting_reassignment_operator",
        "IS NOW A": "type_casting_assignment_operator",
        "VISIBLE": "print_keyword",
        "GIMMEH": "input_keyword",
        "O RLY?": "opening_conditional_statement_delimiter",
        "YA RLY": "alternative_conditional_statement_delimiter",
        "MEBBE": "alternative_conditional_statement_delimiter",
        "NO WAI": "alternative_conditional_statement_delimiter",
        "OIC": "closing_conditional_statement_delimiter",
        "WTF?": "opening_switch_statement_delimiter",
        "OMG": "alternative_switch_statement_delimiter",
        "OMGWTF": "alternative_switch_statement_delimiter",
        "IM IN YR": "loop_keyword",
        "UPPIN": "increment_keyword",
        "NERFIN": "decrement_keyword",
        "YR": "loop_keyword",
        "TIL": "loop_keyword",
        "WILE": "loop_keyword",
        "IM OUTTA YR": "loop_exit_keyword",
        "HOW IZ I": "function_declaration_start_delimiter",
        "IF U SAY SO": "function_declaration_end_delimiter",
        "GTFO": "alternative_switch_statement_delimiter",
        "FOUND YR": "function_return_keyword",
        "I IZ": "function_call_keyword",
        "MKAY": "multi_operator_closing_delimiter",
        "AN": "operand_separator_keyword",
        "IT": "function_parameter_keyword",
        "IDENTIFIER": "identifiers",
        "NUMBR": "integer_data_type",
        "NUMBAR": "float_data_type",
        "YARN": "string_data_type",
        "TROOF": "boolean_data_type",
        "NOOB": "null_data_type",
        "WIN": "troof_literal",
        "FAIL": "troof_literal",
        ":": "escape_character",
        "\"": "string_delimiter",
        "STRING": "yarn_literal",
        "NUMBR_LITERAL": "numbr_literal",
        "NUMBAR_LITERAL": "numbar_literal",
        "COMMENT": "comment_literal",
        "+": "visible_concatenate_operator",
        "TYPE": "type_literal",
        "NEWLINE": "linebreak_delimiter",
        "SUPPRESS_NEWLINE": "suppress_newline_delimiter",
    }
    return lexeme_types_dict[lexeme] # Returns the lexeme type of the passed lexeme.
